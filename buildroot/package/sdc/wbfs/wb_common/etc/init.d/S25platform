#!/bin/sh
# S??platform init script
# Check/configure the wb platform.
# jon.hefling@lairdtech.com 3-July,2012
#

do_platform_bootfile_option()
{
  cat >$1<<-	'##_eof-do_platform_bootfile_option'
	##
	## sourced by dhcp configuration script
	##
	if [ -n "$bootfile" ]
	then
	  # requested bootfile option should contain url-to-firmware-5dsums-list
	  # if fw_update not-running and bootfile-flag then begin remote update...
	  if ps |grep -q -v "[ ].*update" \
	  && [ -f /tmp/bootfile_ ]
	  then
	    rm -f /tmp/bootfile_
	    if fw_update -- 2>/dev/null
	    then
	      ( fw_update --url $bootfile 2>&1 \
	        |tee /var/log/update.log >/dev/console )&
	    fi
	  fi
	fi
	##_eof-do_platform_bootfile_option
  touch /tmp/bootfile_
}

do_platform_update_notify()
{
  cat >$1<<-	__eof-do_platform_update_notify
	# $1
	# wait for network, then notify server of status
	while :
	do
	  sleep 7
	  if ifconfig eth0 2>/dev/null |grep -q "inet addr:[1-9]"
	  then
	    if fw_update -- 2>/dev/null \
	    && fw_update --ns $2 update_success 
	    then
	      break
	    fi
	  fi
	done
	rm -f $1
	__eof-do_platform_update_notify
  ( /bin/sh $1 )&
}

# wired ethernet phy (eth0_linux and macb0_u-boot)
# The MAC address is normally stored in u-boot:env as ethaddr, with a default
# value of 00:17:23:00:00:00, or a later assigned value. Without this value, a
# totally random address is generated by u-boot, and is apparently written to
# the phy.  In either case, Linux reads the address from the phy.
# default value:
MAC=00:17:23:00:00:00

# extract wb platform-specific information 
# the version number proper is parsed from the `hostname`-release file
# the wb type and images come from the kernel cmdline:  wbNNxxx=ab/ab
# missing data is tolerated
if [ -f /etc/${HOSTNAME}-release ]
then
  read -r x </etc/${HOSTNAME}-release && wbv=${x##*\ }
  read -r x </proc/cmdline \
  && for i in $x
     do
       case $i in wb[0-9][0-9]*) wbt=${i%%=*}_ wbi=~${i##*=};; esac
     done
#  wbv=$( sed -n "s/.* \([a-z0-9]*\)/\1/p" /etc/summit-release 2>/dev/null )
#  eval `sed -n "/.*wb[0-9][0-9][a-z]*=/\
#    s/.* \(wb[0-9][0-9][a-z]*\)=\([ab]\/[ab]\).*/\ wbt=\1_ wbi=~\2/p" \
#      /proc/cmdline`
fi


case $1 in
  
  start)
    echo "Checking platform... ${wbt}${wbv}${wbi}"

    ## determine if the mac address is valid
    mac=$( cat /sys/class/net/eth0/address 2>/dev/null )
    if [ "$mac" == "$MAC" -o "${mac:0:8}" != "${MAC:0:8}" ]
    then
      echo "  invalid/null Ethernet MAC address detected: $mac"
      random_mac=`dd if=/dev/urandom bs=1 count=3 2>/dev/null \
        |/usr/bin/od -t x1 -N 3 \
        |/bin/sed -n '1s/^....... \(..\) \(..\) \(..\)/00:17:23:\1:\2:\3/p'`

      echo "    storing new (randomized) mac address: $random_mac"
      ifconfig eth0 hw ether $random_mac
      fw_setenv ethaddr $random_mac

      touch /tmp/platform_update_request
    fi

    ## request dhcp bootfile-string if set
    if [ -f /tmp/platform_update_request ]
    then
      echo "  enabling platform-bootfile-option request (dhcp activated)"
      do_platform_bootfile_option /tmp/platform_bootfile_option
    fi

    ## check for updated_kernel
    if ufv=$( fw_printenv -n updated_kernel 2>/dev/null )
    then
      echo "  clearing updated_kernel-${ufv:0:1} flag"
      fw_setenv updated_kernel
    fi

    ## check for updated_rootfs
    if ufv=$( fw_printenv -n updated_rootfs 2>/dev/null )
    then
      echo "  clearing updated_rootfs-${ufv:0:1} flag"
      fw_setenv updated_rootfs
      #echo -en "    calculating module dependencies..."
      #depmod -a && echo || echo ERROR
    fi

    ## check for updated_platform and settings
    if ufv=$( fw_printenv -n updated_% 2>/dev/null )
    then
      eval $ufv
      fw_setenv updated_%
      # process updated_platform parameters . . .

      if [ -n "$nsap" ]
      then
        echo "  pending server notification of update-status"
        do_platform_update_notify /tmp/platform_update_notify $nsap
      fi

      if [ -n "$mac" ]
      then
        echo "  storing newly assigned mac address: $mac"
        fw_setenv ethaddr $mac
        ifconfig eth0 hw ether $mac
      fi

      if [ -n "$fwts" ]
      then
        echo "  transferring system settings from other rootfs"
        fw_select --transfer-system-settings
      fi
    
    fi
    ;;
    
  stop)
    ;;
  
  *)
    echo "Usage: $0 {start|stop}"
    exit 1
esac

exit 0
     #  if ! ubiattach -p /dev/mtd7
     #  then
     #    echo "  preparing /dev/mtd7 with UBIFS"
     #    flash_erase /dev/mtd7 0 0
     #    ubiformat /dev/mtd7
     #    ubiattach -p /dev/mtd7
     #    ubimkvol /dev/ubi1 -N ubifs -m
     #  fi
     #  ubidetach -p /dev/mtd7
